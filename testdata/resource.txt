exec mkdir output
splt -i schema.hcl -o output --strategy=resource --extension=pg.hcl

exec atlas schema diff --env output --from file://schema.hcl --to env://schema.src
stdout 'Schemas are synced'

cmpdir output/ golden/
-- schema.hcl --
schema "public" {
  comment = "This is the public schema"
}
schema "hello" {
  comment = "This is the hello schema"
}
table "users" {
  schema = schema.public
  column "id" {
    type = int
  }
  column "name" {
    type = text
  }
  primary_key {
    columns = [
      column.id
    ]
  }
}
function "positive" {
  schema = schema.public
  lang   = SQL
  arg "v" {
    type = integer
  }
  return = boolean
  as     = "SELECT v > 0"
}
table "transactions" {
  schema = schema.hello
  column "id" {
    type = int
  }
  column "user_id" {
    type = int
  }
  column "amount" {
    type = decimal
  }
}
table "txns_audit" {
    schema = schema.hello
    column "order_id" {
        type = int
    }
    column "operation" {
        type = text
    }
}
function "audit_tx" {
  schema = schema.hello
  lang   = PLpgSQL
  return = trigger
  as     = <<-SQL
  BEGIN
    INSERT INTO txns_audit(order_id, operation) VALUES (NEW.order_id, TG_OP);
    RETURN NEW;
  END;
  SQL
}
trigger "trigger_txns_audit" {
  on = table.transactions
  after {
    insert    = true
    update_of = [table.transactions.column.amount]
  }
  execute {
    function = function.audit_tx
  }
}
-- golden/schema_public/schema.pg.hcl --
schema "public" {
  comment = "This is the public schema"
}
-- golden/schema_public/tables/users.pg.hcl --
table "users" {
  schema = schema.public
  column "id" {
    type = int
  }
  column "name" {
    type = text
  }
  primary_key {
    columns = [
      column.id
    ]
  }
}
-- golden/schema_public/functions/positive.pg.hcl --
function "positive" {
  schema = schema.public
  lang   = SQL
  return = boolean
  as     = "SELECT v > 0"
  arg "v" {
    type = integer
  }
}
-- golden/schema_hello/functions/audit_tx.pg.hcl --
function "audit_tx" {
  schema = schema.hello
  lang   = PLpgSQL
  return = trigger
  as     = <<-SQL
  BEGIN
    INSERT INTO txns_audit(order_id, operation) VALUES (NEW.order_id, TG_OP);
    RETURN NEW;
  END;
  SQL
}
-- golden/schema_hello/tables/transactions.pg.hcl --
table "transactions" {
  schema = schema.hello
  column "id" {
    type = int
  }
  column "user_id" {
    type = int
  }
  column "amount" {
    type = decimal
  }
}
-- golden/schema_hello/schema.pg.hcl --
schema "hello" {
  comment = "This is the hello schema"
}
-- golden/schema_hello/tables/transactions.pg.hcl --
table "transactions" {
  schema = schema.hello
  column "id" {
    type = int
  }
  column "user_id" {
    type = int
  }
  column "amount" {
    type = decimal
  }
}
trigger "trigger_txns_audit" {
  on = table.transactions
  after {
    insert    = true
    update_of = [table.transactions.column.amount]
  }
  execute {
    function = function.audit_tx
  }
}
-- golden/schema_hello/tables/txns_audit.pg.hcl --
table "txns_audit" {
  schema = schema.hello
  column "order_id" {
    type = int
  }
  column "operation" {
    type = text
  }
}
-- atlas.hcl --
data "hcl_schema" "app" {
  paths = fileset("output/**/*.hcl")
}
env "output" {
  schema {
    src = data.hcl_schema.app.url
  }
  dev = "docker://postgres/16/dev"
}